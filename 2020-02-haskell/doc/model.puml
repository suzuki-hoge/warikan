@startuml

hide empty methods

package Application {
    class apply << (F, lightgreen) >> {
        MemberSection -> MemberSection -> [MemberSection] -> Amount -> Adjuster -> Fraction -> [MemberPercent] -> Either Error [Bill]
    }
    class guard << (F, lightgreen) >> {
        [MemberSection] -> [MemberPercent] -> Either Error [MemberPercent]
    }
    class Error << (S, lightskyblue) >> {
        SectionMismatch | PercentMismatch
    }
    apply -r-> guard
    guard -r-> Error
}

package Domain {
    class MemberSection << (T, orange) >> {
    }
    class Secretary << (T, orange) >> {
    }
    class Accumulator << (T, orange) >> {
    }
    class MemberCount << (T, orange) >> {
        Int
    }

    class Name << (T, orange) >> {
        String
    }
    MemberSection *--> Name
    MemberSection *--> Section

    class MemberPercent << (T, orange) >> {
    }
    class Percent << (T, orange) >> {
        Int
    }
    MemberPercent *--> Name
    MemberPercent *--> Percent

    class Section << (S, lightskyblue) >> {
        L | M | S
    }

    class "Adjuster a" as Adjuster << (C, pink) >> {
        adjust :: a -> Fraction -> Bill
    }
    Secretary -d-|> Adjuster
    Accumulator -d-|> Adjuster
    Adjuster --> Bill : > out

    class Sharing << (T, orange) >> {
        Int
    }
    class "Fraction a" as Fraction << (C, pink) >> {
        makeFraction :: Amount -> MemberCount -> (Sharing, a)
        value :: a -> Int
    }
    class Missing << (T, orange) >> {
        Int
    }
    class Excessing << (T, orange) >> {
        Int
    }
    Missing -d-|> Fraction
    Excessing -d-|> Fraction
    Fraction --> Sharing : > out

    class Amount << (T, orange) >> {
        Int
    }

    class Bill << (T, orange) >> {
        Int
    }
    Bill *--> Name

    class demand << (F, lightgreen) >> {
        Adjuster -> Fraction -> [MemberPercent] -> [Bill]
    }

    class count << (F, lightgreen) >> {
        [MemberPercent] -> MemberCount
    }
    count --> MemberPercent : < in
    count --> MemberCount : > out

    class share << (F, lightgreen) >> {
        [MemberPercent] -> Sharing -> [Bill]
    }
    share --> Sharing : < in
    share --> MemberPercent : < in
    share --> Bill : > out

    demand -d-> count
    demand -d-> share
}

package Fundamental {
}

apply -d-> demand
apply --> Amount
apply --> "2.." MemberSection

Percent -[hidden]d-> Fundamental

'[MemberPercent] -> `count` -> MemberCount
'                    Amount -> MemberCount -> `makeFraction` -> (Sharing, Missing)
'                                            [MemberPercent] -> (Sharing, _      ) -> `share`  -> [Bill]
'                                                  Secretary -> (_,       Missing) -> `adjust` ->  Bill
'                                                                                                   ↓
'                                                                                                 `fold`
'                                                                                                   ↓
'                                                                                                 [Bill]

@enduml
