-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/githubuser/warikan#readme</a>
@package warikan
@version 0.1.0.0


-- | Application types.
module Application.Type
data Error

-- | Mismatch in MemberSection names and MemberPercent names.
MemberError :: Error

-- | Sum of percent does not 100%.
PercentError :: Error

-- | Specified percent is not in section range.
SectionError :: Error
instance GHC.Classes.Eq Application.Type.Error
instance GHC.Show.Show Application.Type.Error


-- | Domain types.
module Domain.Type

-- | use like id in this work, so you must keep uniqueness.
newtype Name
Name :: String -> Name
data MemberSection
MemberSection :: Name -> Section -> MemberSection
data Section

-- | Large
L :: Section

-- | Medium
M :: Section

-- | Small
S :: Section
data MemberPercent
MemberPercent :: Name -> Percent -> MemberPercent
newtype Percent
Percent :: Int -> Percent
newtype MemberCount
MemberCount :: Int -> MemberCount
data Bill
Bill :: Name -> Int -> Bill
newtype Amount
Amount :: Int -> Amount
newtype Sharing
Sharing :: Int -> Sharing

-- | Fraction amount calculation method.
class Fraction a
makeFraction :: Fraction a => a -> Amount -> MemberCount -> (Sharing, FractionAmount)

-- | Fraction amount method that collect slightly and <a>Missing</a>.
data Missing
Missing :: Missing

-- | Fraction amount method that collect overly and <a>Excessing</a>.
data Excessing
Excessing :: Excessing
data FractionAmount
MissingAmount :: Int -> FractionAmount
ExcessingAmount :: Int -> FractionAmount
fractionAmountValue :: FractionAmount -> Int

-- | Accumulate for next party.
data Accumulator
Accumulator :: Accumulator

-- | Entrust fraction amount to secretary.
data Secretary
Secretary :: Secretary

-- | Fix Bill for fraction amount.
class Adjuster a
adjust :: Adjuster a => a -> FractionAmount -> Bill
instance GHC.Classes.Eq Domain.Type.Secretary
instance GHC.Show.Show Domain.Type.Secretary
instance GHC.Classes.Eq Domain.Type.Accumulator
instance GHC.Show.Show Domain.Type.Accumulator
instance GHC.Classes.Eq Domain.Type.FractionAmount
instance GHC.Show.Show Domain.Type.FractionAmount
instance GHC.Classes.Eq Domain.Type.Excessing
instance GHC.Show.Show Domain.Type.Excessing
instance GHC.Classes.Eq Domain.Type.Missing
instance GHC.Show.Show Domain.Type.Missing
instance GHC.Classes.Eq Domain.Type.Sharing
instance GHC.Show.Show Domain.Type.Sharing
instance GHC.Classes.Eq Domain.Type.Amount
instance GHC.Show.Show Domain.Type.Amount
instance GHC.Classes.Eq Domain.Type.Bill
instance GHC.Show.Show Domain.Type.Bill
instance GHC.Classes.Eq Domain.Type.MemberCount
instance GHC.Show.Show Domain.Type.MemberCount
instance GHC.Classes.Eq Domain.Type.MemberPercent
instance GHC.Show.Show Domain.Type.MemberPercent
instance GHC.Classes.Eq Domain.Type.Percent
instance GHC.Show.Show Domain.Type.Percent
instance GHC.Classes.Eq Domain.Type.MemberSection
instance GHC.Show.Show Domain.Type.MemberSection
instance GHC.Classes.Eq Domain.Type.Section
instance GHC.Show.Show Domain.Type.Section
instance GHC.Classes.Eq Domain.Type.Name
instance GHC.Show.Show Domain.Type.Name
instance Domain.Type.Adjuster Domain.Type.Accumulator
instance Domain.Type.Adjuster Domain.Type.Secretary
instance Domain.Type.Fraction Domain.Type.Missing
instance Domain.Type.Fraction Domain.Type.Excessing


-- | Fundamental types.
module Fundamental.Function

-- | Right pipe.
(|>) :: a -> (a -> b) -> b
infixl 3 |>

-- | Right pipe for tuple.
(||>) :: (a, b) -> (a -> c, b -> d) -> (c, d)
infixl 3 ||>

-- | Fold tuple.
(><) :: (a, b) -> ((a, b) -> c) -> c
infixl 3 ><

-- | Flipped fmap.
(<&>) :: Either l r -> (r -> x) -> Either l x
infixl 2 <&>

-- | Safe head.
--   
--   No exception if list is empty.
head' :: [a] -> [a]

-- | Safe last.
--   
--   No exception if list is empty.
last' :: [a] -> [a]


-- | Fundamental modules exporter.
module Fundamental


-- | Domain functions.
module Domain.Function

-- | Fix bills.
demand :: (Adjuster adjuster, Fraction fraction) => adjuster -> fraction -> Amount -> [MemberPercent] -> [Bill]


-- | Domain modules exporter.
module Domain


-- | Application functions.
module Application.Function

-- | Demand bills if input is valid.
apply :: (Adjuster a, Fraction f) => MemberSection -> MemberSection -> [MemberSection] -> Amount -> a -> f -> [MemberPercent] -> Either Error [Bill]


-- | Application modules exporter.
module Application
